{
  "format": "json.v2",
  "spec_id": "A1",
  "title": "A1 — Bootstrap tiny-transformer-lab (repo, CLI, конфиги, интеграции GK/MLflow, data I/O)",
  "created_at": "2025-10-18T13:00:00+03:00",
  "owners": ["Andrei (PO)", "Tech: Andrei + GPT-5 Thinking"],
  "status": "planned",
  "project": {
    "name": "tiny-transformer-lab",
    "slug": "ttlab",
    "description_ru": "Базовая инфраструктура для экспериментов с тини-трансформерами: единый CLI, конфиги, конвертация и валидация датасетов (JSONL/Parquet), трекинг экспериментов в MLflow, интеграция с GardenKeeper."
  },
  "goals_ru": [
    "Поднять минимальный рабочий репозиторий с чистой структурой и качественными практиками (quality gates, тест-пирамида, CI).",
    "Определить стандарты данных и конфигов. Реализовать data I/O: validate/split/convert/stats для JSONL↔Parquet.",
    "Сделать единый CLI `ttlab` (Typer) + e2e smoke сценарий.",
    "Интегрировать MLflow (логирование метрик/артефактов) и GardenKeeper (манифест проекта)."
  ],
  "out_of_scope_ru": [
    "Тренировка моделей, токенайзеры, словари (это B1+).",
    "Сложные пайплайны генерации синтетики (делается в отдельном проекте toy-lang-lab, подключаем только как источник данных)."
  ],
  "deliverables": [
    "Рабочая структура репозитория (см. repo_layout).",
    "CLI `ttlab` с командами: init, check, data:* (validate/split/convert/stats), mlflow:ping, smoke.",
    "Схемы конфигов (Pydantic) и образцы YAML (conf/*).",
    "Интеграция с MLflow: логирование dataset_stats и артефактов.",
    "Манифест GardenKeeper `garden_project.yml`.",
    "Тесты (unit/integration/e2e-smoke) и CI workflow.",
    "Документированные метрики (metrics.jsonl) и SLIs/SLOs."
  ],
  "repo_layout": {
    "root_files": [
      "README.md",
      "pyproject.toml",
      ".python-version (опц.)",
      ".editorconfig",
      ".gitignore",
      ".pre-commit-config.yaml",
      "garden_project.yml",
      "specs/A1.json.v2 (вот этот файл)",
      ".github/workflows/ci.yml"
    ],
    "src_tree": [
      "ttlab/__init__.py",
      "ttlab/cli.py",
      "ttlab/config/__init__.py",
      "ttlab/config/models.py",
      "ttlab/data/__init__.py",
      "ttlab/data/validate.py",
      "ttlab/data/convert.py",
      "ttlab/data/split.py",
      "ttlab/data/stats.py",
      "ttlab/logging.py",
      "ttlab/mlflow_utils.py",
      "ttlab/observability/metrics_writer.py",
      "ttlab/gk/__init__.py",
      "ttlab/gk/manifest.py"
    ],
    "conf_tree": [
      "conf/base.yaml",
      "conf/mlflow.yaml",
      "conf/data/sample_dataset.yaml",
      "conf/paths.yaml"
    ],
    "tests_tree": [
      "tests/unit/*",
      "tests/integration/*",
      "tests/e2e/test_smoke.py",
      "tests/resources/sample.jsonl",
      "tests/resources/sample.parquet"
    ],
    "data_dirs": [
      "data/raw/",
      "data/processed/",
      "data/splits/",
      "out/metrics/",
      "out/artifacts/"
    ]
  },
  "cli": {
    "binary": "ttlab",
    "framework": "Typer",
    "commands": [
      {
        "name": "init",
        "desc_ru": "Создать базовые папки, образцы конфигов и проверить окружение.",
        "example": "ttlab init --force"
      },
      {
        "name": "check",
        "desc_ru": "Быстрая проверка окружения: версии Python, доступ к MLflow, RW-директории.",
        "example": "ttlab check"
      },
      {
        "name": "data:validate",
        "desc_ru": "Валидация JSONL/Parquet по схеме (минимум: поля, типы, null-доли).",
        "example": "ttlab data:validate --in data/raw/train.jsonl --schema conf/data/sample_dataset.yaml"
      },
      {
        "name": "data:convert",
        "desc_ru": "JSONL↔Parquet (Apache Arrow).",
        "example": "ttlab data:convert --in data/raw/train.jsonl --out data/processed/train.parquet --to parquet"
      },
      {
        "name": "data:split",
        "desc_ru": "Детерминированный сплит (train/val/test) по seed и стратегии (by_row/by_key).",
        "example": "ttlab data:split --in data/processed/all.parquet --out data/splits --ratios 0.9,0.05,0.05 --seed 42"
      },
      {
        "name": "data:stats",
        "desc_ru": "Подсчёт базовых статов: строк, уникальных ключей, длины текстов, пустоты полей.",
        "example": "ttlab data:stats --in data/processed/train.parquet --log-mlflow"
      },
      {
        "name": "mlflow:ping",
        "desc_ru": "Проверка соединения с MLflow и/или авто-создание эксперимента.",
        "example": "ttlab mlflow:ping --experiment ttlab-A1"
      },
      {
        "name": "smoke",
        "desc_ru": "E2E-smoke: загрузка конфига → чтение образца датасета → stats → лог в MLflow.",
        "example": "ttlab smoke --config conf/base.yaml"
      }
    ],
    "exit_codes": { "ok": 0, "invalid_input": 2, "io_error": 3, "mlflow_error": 4, "unknown": 5 }
  },
  "config": {
    "language": "YAML (Pydantic валидация)",
    "files": ["conf/base.yaml", "conf/mlflow.yaml", "conf/paths.yaml", "conf/data/*.yaml"],
    "schema_core": {
      "General": { "seed": "int", "run_name": "str" },
      "Paths": {
        "data_raw": "Path",
        "data_processed": "Path",
        "data_splits": "Path",
        "out_metrics": "Path",
        "out_artifacts": "Path"
      },
      "Data": {
        "format": "enum(JSONL|PARQUET)",
        "input_path": "Path",
        "schema_fields": "list[field_name:str, type:str, required:bool]"
      },
      "MLflow": {
        "tracking_uri": "str",
        "experiment": "str",
        "artifact_location": "str|null"
      }
    }
  },
  "integrations": {
    "garden_keeper": {
      "manifest_fields": {
        "name": "tiny-transformer-lab",
        "slug": "ttlab",
        "kind": "python-lab",
        "tags": ["transformer", "ml", "dataset", "tooling"],
        "paths": { "src": "ttlab/", "conf": "conf/", "data": "data/" },
        "repo": { "vcs": "git" }
      }
    },
    "mlflow": {
      "experiment_default": "ttlab-A1",
      "log_on": ["data:stats", "smoke"],
      "artifacts": ["dataset_schema.json", "dataset_stats.json", "sample_rows.json"],
      "params": ["format", "split_ratios", "seed"]
    }
  },
  "observability": {
    "metrics_jsonl": {
      "path": "out/metrics/metrics.jsonl",
      "schema": {
        "ts": "iso8601",
        "event": "str",
        "run_id": "str",
        "metric": "str",
        "value": "number",
        "labels": "dict"
      },
      "examples": [
        { "event": "data_stats", "metric": "rows_total", "value": 100000 },
        { "event": "convert", "metric": "throughput_mb_s", "value": 32.5 }
      ]
    },
    "logging": { "level": "INFO", "rich_tracebacks": true },
    "crash_free_rate_slo": ">= 99.5% за 7 дней для CLI операций < 30 мин"
  },
  "slis_slos": [
    {
      "feature": "data:convert JSONL→Parquet",
      "sli": "Средняя сквозная скорость (MB/s) на файлах 100–1000MB",
      "slo": "≥ 25 MB/s на реф-машине; провал → warning в CI"
    },
    {
      "feature": "data:validate",
      "sli": "% файлов, прошедших схему без ошибок",
      "slo": "100% для образцов в репо; ≥ 99% для внешних наборов (warning)"
    },
    {
      "feature": "smoke",
      "sli": "Успешные e2e-прогонки",
      "slo": "100% на main; при провале — блок merge"
    }
  ],
  "quality_gates": {
    "pre_commit": [
      "ruff lint --fix",
      "black --check",
      "mypy ttlab",
      "pytest -q tests/unit"
    ],
    "pre_merge": [
      "pytest -q",
      "coverage >= 80%",
      "pip-audit (no high/critical)",
      "build wheel",
      "e2e smoke ok"
    ],
    "pre_release": [
      "tag + changelog",
      "freeze deps",
      "artifacts reproducible",
      "docs up to date"
    ]
  },
  "test_plan": {
    "pyramid": { "unit": "много", "integration": "средне", "e2e": "минимум" },
    "coverage_min": 0.8,
    "unit_examples": [
      "validate: типы/required",
      "split: детерминизм seed",
      "convert: roundtrip jsonl→parquet→jsonl (малый образец)"
    ],
    "integration_examples": [
      "stats читает parquet и пишет metrics.jsonl",
      "mlflow_utils создаёт/находит эксперимент"
    ],
    "e2e_smoke": [
      "smoke: config→validate→convert→stats→mlflow"
    ]
  },
  "e2e_smoke": {
    "command": "ttlab smoke --config conf/base.yaml",
    "inputs": ["tests/resources/sample.jsonl"],
    "expected": [
      "metrics.jsonl содержит события smoke_start, data_stats, smoke_done",
      "В MLflow появился run с артефактами dataset_stats.json"
    ]
  },
  "traceability": {
    "id_pattern": "TTLAB-\\d+",
    "rules_ru": [
      "Каждый task (TTLAB-XX) ↔ минимум один commit и минимум один тест.",
      "Коммиты: Conventional Commits + task id."
    ],
    "conventional_commits": {
      "pattern": "type(scope): subject [TTLAB-XX]",
      "types": ["feat", "fix", "chore", "refactor", "test", "docs", "build", "ci"]
    },
    "examples": [
      "feat(cli): add data:convert JSONL→Parquet [TTLAB-12]",
      "test(data): add roundtrip tests [TTLAB-12]"
    ],
    "artifact_links": [
      "MLflow run_id ↔ commit_sha",
      "metrics.jsonl.run_id ↔ MLflow run_id"
    ]
  },
  "non_functional": {
    "performance": {
      "cli_start_cold_s": "<= 2.0",
      "convert_throughput_mb_s": ">= 25 (реф-машина)"
    },
    "stability": "crash_free_rate >= 99.5%",
    "data_safety": [
      "Валидация схемы обязательна до конвертации.",
      "Никогда не перезаписывать входные файлы; писать в data/processed и out/artifacts."
    ],
    "security": [
      "pip-audit без high/critical",
      "Зависимости с upper bound для рискованных пакетов при необходимости"
    ],
    "i18n": "CLI и логи — EN по умолчанию; сообщения об ошибках — EN/RU (короткие)."
  },
  "dod_ru": [
    "Все deliverables на месте, README обновлён.",
    "CLI команды работают на образцах (tests/resources).",
    "E2E smoke зелёный в CI.",
    "Покрытие unit+integration ≥ 80%.",
    "MLflow run создаётся и содержит артефакты.",
    "ADR/ARD включены в specs/A1.json.v2."
  ],
  "pr_template": {
    "problem_ru": "Что и почему меняем? К какому task (TTLAB-XX) относится?",
    "solution_ru": "Как решаем? Альтернативы? Ссылки на ADR.",
    "tests_ru": "Какие тесты добавлены/обновлены? Покрытие?",
    "risk_ru": "Риски и как их снижаем.",
    "screenshots_ru": "Логи, скриншоты CI/MLflow, выдержки из metrics.jsonl."
  },
  "ard": {
    "id": "ARD-A1",
    "context_ru": "Нужна воспроизводимая среда для малых трансформеров: единые конвенции, CLI, конфиги, дата-стандарты, интеграции.",
    "functional_reqs_ru": [
      "CLI команды (init, check, data:validate/convert/split/stats, mlflow:ping, smoke).",
      "Схемы конфигов и валидация (Pydantic).",
      "Поддержка JSONL и Parquet (Arrow) + безопасные преобразования.",
      "Минимальные метрики и логирование в MLflow."
    ],
    "quality_reqs_ru": [
      "Quality gates (pre-commit/merge/release).",
      "Тест-пирамида с e2e-smoke.",
      "SLIs/SLOs на ключевые операции данных."
    ],
    "constraints_ru": [
      "Python 3.11+.",
      "Совместимость с MLflow Homelab (локальный tracking_uri).",
      "Совместимость с GardenKeeper (garden_project.yml)."
    ],
    "acceptance_ru": "Все пункты DoD и SLO достигнуты на main."
  },
  "adrs": [
    {
      "id": "ADR-0001",
      "title": "Разделение на multi-repo: ttlab и toy-lang-lab",
      "status": "Accepted",
      "context_ru": "Генерация данных (toy-lang) и обучение/инфра (ttlab) имеют разные циклы жизни.",
      "decision_ru": "Оставить отдельные репозитории с чётким интерфейсом: ttlab читает готовые датасеты.",
      "consequences_ru": "Меньше связности; нужна договорённость по форматам (см. ADR-0002)."
    },
    {
      "id": "ADR-0002",
      "title": "Формат датасета: JSONL (канонический ввод) + Parquet (каноническая обработка)",
      "status": "Accepted",
      "context_ru": "JSONL удобен для генераторов и простого диффа; Parquet эффективен по памяти/скорости.",
      "decision_ru": "Принимать JSONL, конвертировать в Parquet перед статистикой/тренировкой.",
      "consequences_ru": "Нужна строгая схема и трансформации; хранить обе версии при необходимости."
    },
    {
      "id": "ADR-0003",
      "title": "CLI фреймворк: Typer",
      "status": "Accepted",
      "context_ru": "Сравнивались argparse/Click/Typer.",
      "decision_ru": "Typer за счёт type hints, автодоков и лаконичности.",
      "consequences_ru": "Зависимость на Typer; придерживаться простых команд."
    },
    {
      "id": "ADR-0004",
      "title": "Конфиги: YAML + Pydantic, без Hydra на A1",
      "status": "Accepted",
      "context_ru": "Нужна простота на первом этапе.",
      "decision_ru": "YAML + Pydantic models, расширяемо.",
      "consequences_ru": "Меньше магии; позже можно добавить Hydra (A2+)."
    },
    {
      "id": "ADR-0005",
      "title": "Трекинг экспериментов: MLflow",
      "status": "Accepted",
      "context_ru": "Требуется стандартный инструмент артефактов/метрик.",
      "decision_ru": "Используем MLflow Homelab.",
      "consequences_ru": "Зависимость на MLflow; прописать tracking_uri в конфиге."
    }
  ],
  "ci_cdp": {
    "github_actions": {
      "steps_ru": [
        "setup-python (3.11)",
        "uv/pip install",
        "ruff+black+mypy",
        "pytest + coverage",
        "upload coverage (опц.)",
        "архив артефактов (метрики/логи)"
      ]
    }
  },
  "dependencies": {
    "runtime": [
      "typer>=0.12",
      "pydantic>=2.6",
      "pyyaml>=6",
      "pandas>=2.2",
      "pyarrow>=17",
      "numpy>=1.26",
      "tqdm>=4.66",
      "mlflow>=2.16.0",
      "rich>=13",
      "loguru>=0.7"
    ],
    "dev": ["pytest>=8", "pytest-cov>=5", "mypy>=1.10", "ruff>=0.6", "black>=24", "pip-audit>=2.7"]
  },
  "samples": {
    "garden_project.yml": {
      "name": "tiny-transformer-lab",
      "slug": "ttlab",
      "kind": "python-lab",
      "version": "0.1.0-A1",
      "tags": ["transformer", "datasets", "mlflow", "tooling"],
      "paths": { "src": "ttlab/", "conf": "conf/", "data": "data/" }
    },
    "pyproject.toml_min": {
      "project": {
        "name": "tiny-transformer-lab",
        "version": "0.1.0",
        "description": "Tiny Transformer Lab — infra & data tools",
        "requires-python": ">=3.11",
        "dependencies": ["typer", "pydantic", "pyyaml", "pandas", "pyarrow", "numpy", "tqdm", "mlflow", "rich", "loguru"]
      },
      "tool": {
        "ruff": { "line-length": 100 },
        "black": { "line-length": 100 }
      }
    }
  },
  "risks_ru": [
    "Несогласованная схема данных между toy-lang-lab и ttlab → жёсткая валидация + версии схем.",
    "Локальные различия окружения → зафиксировать Python и базовые версии библиотек.",
    "Непредсказуемая скорость конвертации → SLO как warning на A1."
  ],
  "open_questions_ru": [
    "Нужен ли Docker на A1 или оставить на A2?",
    "Поддержка Arrow IPC/Feather ради быстрых прототипов?"
  ],
  "schedule_ru": [
    "Неделя 1: репо, CLI каркас, конфиги, validate.",
    "Неделя 2: convert/split/stats + metrics.jsonl.",
    "Неделя 3: MLflow интеграция + e2e smoke + CI."
  ]
}
